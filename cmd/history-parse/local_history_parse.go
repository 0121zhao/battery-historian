// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bufio"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"github.com/google/battery-historian/parseutils"
)

var (
	summaryFormat = flag.String("summary", parseutils.FormatBatteryLevel, "1. batteryLevel 2. totalTime")
	historyFile   = flag.String("history", "", "Battery history file generated by `adb shell dumpsys batterystats -c --history-start <start>`")
	csvFile       = flag.String("csv", "", "Output filename to write csv timeseries data to.")
	scrubPII      = flag.Bool("scrub", true, "Whether ScrubPII is applied to addresses.")
)

func usage() {
	fmt.Println("Incorrect summary argument. Format: --summary=[batteryLevel|totalTime] --history=<log-file> [--csv=<csv-output-file>]")
	os.Exit(1)
}

func checkFlags() {
	switch *summaryFormat {
	case parseutils.FormatBatteryLevel:
	case parseutils.FormatTotalTime:
	default:
		fmt.Println("1")
		usage()
	}

	if *historyFile == "" {
		fmt.Println("2")
		usage()
	}
}

func main() {
	flag.Parse()
	checkFlags()

	// read the whole file
	history, err := ioutil.ReadFile(*historyFile)
	if err != nil {
		log.Fatal(err)
	}

	writer := ioutil.Discard
	if *csvFile != "" && *summaryFormat == parseutils.FormatTotalTime {
		f, err := os.Create(*csvFile)
		if err != nil {
			log.Fatal(err)
		}
		defer f.Close()
		csvWriter := bufio.NewWriter(f)
		defer csvWriter.Flush()
		writer = csvWriter
	}

	rep := parseutils.AnalyzeHistory(string(history), *summaryFormat, writer, *scrubPII)

	// Exclude summaries with no change in battery level
	var a []parseutils.ActivitySummary
	for _, s := range rep.Summaries {
		if s.InitialBatteryLevel != s.FinalBatteryLevel {
			a = append(a, s)
		}
	}

	if rep.TimestampsAltered {
		fmt.Println("Some timestamps were changed while processing the log.")
	}
	if len(rep.Errs) > 0 {
		fmt.Println("Errors encountered:")
		for _, err := range rep.Errs {
			fmt.Println(err.Error())
		}
	}
	fmt.Println("\nNumber of summaries ", len(a), "\n")
	for _, s := range a {
		s.Print(&rep.OutputBuffer)
	}

	fmt.Println(rep.OutputBuffer.String())
}
